// Exercise 7: Comparison (10 points)

// For this exercise, create 2 programs defined in files slow.cpp and fast.cpp.

// In slow.cpp, generate a random array of size 200,000 and pass it to your sorting algorithm.
// Run the program and observe that it never ends. Press CTRL C to terminate the process.

// In fast.cpp, generate a random array of size 200,000 and pass it to the sort routine that is part of the C++ standard library.
// The following code shows how you would call the sort function on an array a of size 200,000.

// sort(a, a + 200000);
// If the above line fails to compile, you may need to include the algorithm header as follows.

// #include <algorithm>
// Run fast.cpp and notice how quickly it terminates.
// The reason for this is that the sorting function in the standard library is using is more efficient than the one you produced.
// How quickly algorithms terminate is within an area of computer science referred to as complexity theory.

// fast.cpp
#include <iostream>
#include <algorithm>

using namespace std;

int main()
{
    const int SIZE = 200000;
    int a[SIZE];
    srand(time(0));
    for (int i = 0; i < SIZE; i++)
    {
        a[i] = {rand()};
    }
    
    sort(a, a + 200000);
    for (int i = 0; i < SIZE; i++)
    {
        cout << a[i] << endl;
    }
}


// slow.cpp
#include <iostream>

using namespace std;

void mysort(int a[], int len)
{
    for (int not_sorted = 0; not_sorted < len - 1; not_sorted++)
    {
        int smallest_pos = not_sorted;
        for (int i = not_sorted + 1; i < len; i++)
        {
            if (a[i] < a[smallest_pos])
            {
                smallest_pos = i;
            }
        }
        if (smallest_pos != not_sorted)
        {
                double temp = a[smallest_pos];
                a[smallest_pos] = a[not_sorted];
                a[not_sorted] = temp;
        }
    }
    for (int i = 0; i < len; i++)
    {
        cout << a[i] << " ";
    }
}

int main()
{
    const int SIZE = 200000;
    int a[SIZE];
    srand(time(0));
    for (int i = 0; i < SIZE; i++)
    {
        a[i] = {rand()%200000};
    }
    mysort(a,SIZE);
}

